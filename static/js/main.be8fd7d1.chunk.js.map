{"version":3,"sources":["components/Header/Header.js","components/Scoreboard/Scoreboard.js","components/ImageTiles/ImageTiles.js","components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Header","Jumbotron","fluid","Container","Scoreboard","props","score","wins","ImageTiles","Card","style","width","Img","variant","src","img","Wrapper","useState","setScore","handleClick","CardColumns","Characters","App","Row","Col","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2lBAmBeA,EAdA,WACb,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACE,+CACA,uH,OCDOC,G,YANI,SAACC,GAClB,OACA,6BAAK,wCAAcA,EAAMC,OAAzB,IAAuC,uCAAaD,EAAME,S,eCU7CC,EAVI,SAACH,GAClB,OACE,oCACE,kBAACI,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UACpB,kBAACF,EAAA,EAAKG,IAAN,CAAUC,QAAQ,MAAMC,IAAKT,EAAMU,S,eC0C5BC,EAzCC,WAAO,IAAD,EACMC,mBAAS,GADf,mBACbX,EADa,KACNY,EADM,OAEID,mBAAS,GAFb,mBAEbV,EAFa,KAqBdY,GArBc,KAqBA,WAElBD,EAASZ,EAAQ,KAQnB,OACE,oCACE,kBAAC,EAAD,CAAYA,MAAOA,EAAOC,KAAMA,IAChC,kBAACa,EAAA,EAAD,KA3BA,oCACE,kBAAC,EAAD,CAAYD,YAAaA,EAAaJ,IAAKM,EAAW,GAAGN,MACzD,kBAAC,EAAD,CAAYI,YAAaA,EAAaJ,IAAKM,EAAW,GAAGN,MACzD,kBAAC,EAAD,CAAYI,YAAaA,EAAaJ,IAAKM,EAAW,GAAGN,U,gBCFlDO,MAXf,WACE,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,UAAU,eACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.be8fd7d1.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Container from 'react-bootstrap/Container'\n\nconst Header = () => {\n  return (\n    <Jumbotron fluid>\n      <Container>\n        <h1>Fluid jumbotron</h1>\n        <p>\n          This is a modified jumbotron that occupies the entire horizontal space of\n          its parent.\n        </p>\n      </Container>\n    </Jumbotron>\n  );\n};\n\nexport default Header;","import React from 'react';\nimport './Scoreboard.css';\n\nconst Scoreboard = (props) => {\n  return (\n  <div><span>Score: {props.score}</span> <span>Wins: {props.wins}</span></div>\n  );\n};\n\nexport default Scoreboard;","import React from 'react';\nimport './ImageTiles.css';\n\nimport Card from 'react-bootstrap/Card';\n\nconst ImageTiles = (props) => {\n  return (\n    <>\n      <Card style={{ width: '18rem' }}>\n        <Card.Img variant=\"top\" src={props.img} />\n      </Card>\n    </>\n  );\n};\n\nexport default ImageTiles;","import React, { useState } from 'react';\nimport './Wrapper.css';\nimport Scoreboard from '../Scoreboard/Scoreboard';\nimport ImageTiles from '../ImageTiles/ImageTiles';\n\nimport CardColumns from 'react-bootstrap/CardColumns';\n\nimport Characters from '../../matchChars.json'\n\n// all state goes here\nconst Wrapper = () => {\n  const [score, setScore] = useState(0);\n  const [wins, setWins] = useState(0);\n\n  const setTiles = () => {\n    //randomize array and return \n    return (\n      <> \n        <ImageTiles handleClick={handleClick} img={Characters[0].img} />\n        <ImageTiles handleClick={handleClick} img={Characters[1].img} />\n        <ImageTiles handleClick={handleClick} img={Characters[2].img} />\n      </>\n    )\n  }\n\n  const resetGame = () => {\n    //setScore(0)\n\n\n  }\n\n  const handleClick = () => {\n    // if selected !== true\n    setScore(score + 1)\n    //\n\n    // else if selected === true \n    // resetGame()\n\n  };\n\n  return (\n    <>\n      <Scoreboard score={score} wins={wins} />\n      <CardColumns>\n        {setTiles()}\n      </CardColumns>\n    </>\n  );\n};\n\nexport default Wrapper;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport Wrapper from './components/Wrapper/Wrapper';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nfunction App() {\n  return (\n    <Row>\n      <Col className=\"text-center\">\n        <Header />\n        <Wrapper />\n      </Col>\n    </Row>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}